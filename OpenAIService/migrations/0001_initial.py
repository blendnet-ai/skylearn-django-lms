# Generated by Django 4.2.16 on 2024-11-10 14:07

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chat_history', models.JSONField(default=list)),
                ('current_context_variables', models.JSONField(default=dict)),
                ('chat_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('thread_id', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OpenAIAssistant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assistant_id', models.CharField(max_length=500)),
                ('name', models.CharField(choices=[('RESUME_ANALYST', 'Resume Analyst')], max_length=50)),
                ('instructions', models.TextField()),
                ('open_ai_model', models.CharField(max_length=500)),
                ('tools', models.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tool_code', models.TextField()),
                ('default_values_for_non_llm_params', models.JSONField(blank=True, default=dict)),
                ('tool_json_spec', models.JSONField(blank=True, default=dict)),
                ('name', models.CharField(max_length=100)),
                ('context_params', models.JSONField(blank=True, default=list)),
            ],
        ),
        migrations.CreateModel(
            name='PromptTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('llm_config_name', models.CharField(max_length=100)),
                ('type', models.CharField(blank=True, max_length=100, null=True)),
                ('required_kwargs', models.JSONField(blank=True, default=list, help_text='Required key words to be passed in user prompt template. If not provided by calling code, error will be raised. AS OF NOW, ERROR IS RAISED IF ANY KEYWORD IS MISSED, SINCE OTHERWISE $TEMPLATE_VAR LIKE THING WILL REMAIN IN PROMPT. FOR REQUIRED_KEYWORD ARGUMENTS FUNCTIONALITY, WE NEED DEFAULT VALUES OF OPTIONAL ARGS. CHECK IF THIS IS NEEDED, OR REMOVE REQUIRED KWARGS FIELD FROM HERE.')),
                ('initial_messages_templates', models.JSONField(blank=True, default=list, help_text="Initial msgs in the format [{'role': 'assistant|user', 'content': '...'}]")),
                ('system_prompt_template', models.TextField()),
                ('user_prompt_template', models.TextField(blank=True, default='')),
                ('logged_context_vars', models.JSONField(blank=True, default=list, help_text='Context variables to be logged in the chat log along with each user message, for later analysis.')),
                ('streaming_enabled', models.BooleanField(default=False)),
                ('llm_mode', models.CharField(choices=[('assistant', 'Assistant'), ('rag', 'Our RAG Implementation')], default='rag', max_length=10)),
                ('tools', models.ManyToManyField(blank=True, to='OpenAIService.tool')),
            ],
        ),
        migrations.CreateModel(
            name='KnowledgeRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_repo', models.IntegerField(choices=[(1, 'Course')])),
                ('source_path', models.CharField(max_length=255)),
                ('source_type', models.IntegerField(choices=[(1, 'Azure Blob'), (2, 'Amazon S3'), (3, 'Google Drive')])),
                ('index_path', models.CharField(blank=True, max_length=255)),
                ('sas_token', models.CharField(blank=True, max_length=255)),
                ('assistant_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='OpenAIService.openaiassistant')),
            ],
        ),
        migrations.CreateModel(
            name='ContentReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.IntegerField(choices=[('1', 'PDF'), ('2', 'YouTube Video')])),
                ('path', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255, null=True)),
                ('file_id', models.CharField(max_length=255, null=True)),
                ('knowledge_repository_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OpenAIService.knowledgerepository')),
            ],
            options={
                'unique_together': {('knowledge_repository_id', 'path')},
            },
        ),
    ]
